<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数电2-门电路与逻辑代数</title>
      <link href="/2024/12/05/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B0-2/"/>
      <url>/2024/12/05/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B0-2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数电 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电1-数字基本概念</title>
      <link href="/2024/12/02/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B0-1/"/>
      <url>/2024/12/02/%E6%95%B0%E7%94%B5%E7%AC%94%E8%AE%B0-1/</url>
      
        <content type="html"><![CDATA[<h3 id="时钟信号">时钟信号</h3><p>CP(Clock Pulse)时钟脉冲/同步脉冲，是指在数字系统中，时钟信号的一种，它是系统的基本同步信号，用于控制系统各部件的时序关系。</p><h3 id="数制相互转换">数制相互转换</h3><ul><li>十进制数，例：<br>$$<br>475.6 = 4 \times 10^2 + 7 \times 10^1 + 5 \times 10^0 + 6 \times 10^{-1}<br>$$<br>也可以表示为<br>$$(475.6)_{10} 或 475.6D$$</li><li>二进制数，例：<br>$$<br>1101.001 = 1 \times 2^3 + 1 \times 2^2 + 0 \times 2^1 + 1 \times 2^0 + 0 \times 2^{-1} + 0 \times 2^{-2} + 1 \times 2^{-3}<br>$$<br>也可以表示为<br>$$(1101.001)_{2} 或 1101.001B$$</li></ul><blockquote><p>以十六进制数为例:<br>$$(A8D.C)<em>{16} = A\times16^2 + 8\times16^1 + D\times16^0 + C\times16^{-1} = (2701.75)</em>{10}$$</p></blockquote><h3 id="BCD码，余三码，格雷码">BCD码，余三码，格雷码</h3><blockquote><p>以8421为例:<br>$$ (359)<em>{10} = (0011\quad0101\quad1001)</em>{8421} = (0110\quad1000\quad1100)_{余三码} $$</p></blockquote><p>格雷码：一种可靠性编码。因为这种代码中<strong>任何二组相邻<br>代码之间只相差一位码元不同</strong>，其它码相同。</p><table><thead><tr><th style="text-align:center">十进制数</th><th style="text-align:center">四位格雷码</th><th style="text-align:center">十进制数</th><th style="text-align:center">四位格雷码</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0000</td><td style="text-align:center">8</td><td style="text-align:center">1100</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0001</td><td style="text-align:center">9</td><td style="text-align:center">1101</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0011</td><td style="text-align:center">10</td><td style="text-align:center">1111</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0010</td><td style="text-align:center">11</td><td style="text-align:center">1110</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0110</td><td style="text-align:center">12</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0111</td><td style="text-align:center">13</td><td style="text-align:center">1011</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">0101</td><td style="text-align:center">14</td><td style="text-align:center">1001</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0100</td><td style="text-align:center">15</td><td style="text-align:center">1000</td></tr></tbody></table><h3 id="原码，反码，补码">原码，反码，补码</h3><p>原码：正数前面加一位0，负数前面加一位1，表示法不变<br>反码：正数不变，负数符号位仍然为1，数值位按位取反<br>补码：正数不变，负数符号位仍然为1，数值位按位取反<strong>最后再加上1</strong></p><blockquote><p>随便举一个例子:<br>$$ -1001010 = 11001010_{原码} = 10110101_{反码} = 10110110_{补码} $$</p></blockquote><h3 id="基本逻辑关系">基本逻辑关系</h3><p>与(AND) 或(OR) 非(NOT) 异或(XOR) 与非(NAND) 或非(NOR) 等</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 数电 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 数电 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scipy matplotlib学习笔记</title>
      <link href="/2024/11/28/scipy-matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/28/scipy-matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言：探索matplotlib的世界">前言：探索matplotlib的世界</h2><p>lz作为一个几乎没有py基础的萌新，对py各种强大的开源库早有耳闻，借着这次机会，希望能通过学习matplotlib来打开python的世界的大门。（不是第一次打开了）））</p><p>matplotlib是python中一个著名的绘图库，它提供了一系列的绘图函数，可以用来绘制各种图形，包括散点图，折线图，柱状图，饼图，等等。</p><p>下载matplotlib的方法也很简单，Windows系统已经安装好了Python代码运行所需的环境，直接在命令行输入这一行代码即可，安装成功后，我们就可以开始绘图了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><p>本文主要介绍了matplotlib的一些基本用法，包括绘制简单的散点图，分析趋势，拟合曲线等功能。（更强悍的功能有待挖掘，并不是库不够强大，只是lz水平有限+已经足够课程要求，只能说是入门级的学习笔记）</p><p>附上matplotlib官网：<a href="https://matplotlib.org">https://matplotlib.org</a>，里面有丰富的教程和示例，强烈建议读者多多参考（能不能看懂又是另一回事）））。</p><h2 id="绘制散点图">绘制散点图</h2><p>matplotlib中最简单的绘图方式就是绘制散点图，这里以code coploit给我生成的两组数据为例） 代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制数据</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">y1 = np.array([<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>, <span class="number">5.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">8.5</span>, <span class="number">9.5</span>, <span class="number">10.5</span>])</span><br><span class="line">y2 = np.array([<span class="number">1.2</span>, <span class="number">2.2</span>, <span class="number">3.2</span>, <span class="number">4.2</span>, <span class="number">5.2</span>, <span class="number">6.2</span>, <span class="number">7.2</span>, <span class="number">8.2</span>, <span class="number">9.2</span>, <span class="number">10.2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制散点图</span></span><br><span class="line">plt.scatter(x, y1, label=<span class="string">&#x27;Group 1&#x27;</span>)     <span class="comment"># Group 1为图像的名称，Group 2同理</span></span><br><span class="line">plt.scatter(x, y2, label=<span class="string">&#x27;Group 2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图例</span></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置标题和轴标签</span></span><br><span class="line">plt.title(<span class="string">&#x27;Example of Scatter Plot&#x27;</span>)        <span class="comment"># 标题</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis&#x27;</span>)                      <span class="comment"># x轴标签</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Y-axis&#x27;</span>)                      <span class="comment"># y轴标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>可以复制代码查看运行结果，运行结果如下：<br><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/20241128201328.png"></p><p>可以看到，matplotlib绘制的散点图非常直观，请读者对照着代码尝试理解。</p><p>下面提供几种常见的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置图例的位置，&#x27;upper left&#x27;表示左上角</span></span><br><span class="line">plt.legend([<span class="string">&#x27;Group 1&#x27;</span>, <span class="string">&#x27;Group 2&#x27;</span>], loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置坐标轴范围</span></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴刻度</span></span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])   </span><br><span class="line"><span class="comment"># 或者如下，2为步进值</span></span><br><span class="line">plt.xticks(np.arange(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置点的颜色</span></span><br><span class="line">plt.scatter(x, y1, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Group 1&#x27;</span>)</span><br><span class="line"><span class="comment"># &#x27;r&#x27;表示红色，其他颜色代码请参考matplotlib官网,&#x27;Group 1&#x27;为图像的名称</span></span><br></pre></td></tr></table></figure><p>至此掌握这几种函数我们已经能绘制一些简单的散点图了，气泡图，三维图，热力图等功能请自行查找相关资料。</p><h2 id="使用散点图拟合曲线">使用散点图拟合曲线</h2><p>matplotlib中有很多函数可以用来拟合曲线，这里以拟合一条直线函数为例，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr    <span class="comment"># 计算相关系数 引入pearsonr函数</span></span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">4</span>, <span class="number">2.5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5.5</span>, <span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line">y = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4.5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, color=<span class="string">&quot;red&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Scatter Plot of the data&quot;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">linear_model = np.polyfit(x, y, <span class="number">1</span>)     <span class="comment"># 拟合一条直线</span></span><br><span class="line">linear_model_fn = np.poly1d(linear_model)    <span class="comment"># 得到拟合函数</span></span><br><span class="line">x_s = np.arange(<span class="number">0</span>, <span class="number">7</span>)     <span class="comment"># 定义x轴范围</span></span><br><span class="line">plt.plot(x_s, linear_model_fn(x_s), color=<span class="string">&quot;green&quot;</span>)     <span class="comment"># 绘制拟合曲线</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算相关系数</span></span><br><span class="line">corr, _ = pearsonr(x, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;相关系数：&quot;</span>, corr)</span><br><span class="line"><span class="comment"># 相关系数r</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算拟合曲线与原始数据的误差</span></span><br><span class="line">y_pred = linear_model_fn(x)</span><br><span class="line">mse = np.mean((y_pred - y) ** <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;MSE：&quot;</span>, mse)   </span><br><span class="line"><span class="comment"># 均方误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算拟合曲线的拟合程度</span></span><br><span class="line">r_squared = <span class="number">1</span> - (mse / np.var(y))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;拟合程度：&quot;</span>, r_squared)</span><br><span class="line"><span class="comment"># 拟合程度r^2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到拟合曲线的截距和斜率</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;截距：&quot;</span>, linear_model[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;斜率：&quot;</span>, linear_model[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>运行代码结果如下：</p><p><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/Figure.png" alt=""><br>保存之后运行代码，可以看到相关系数，MSE，拟合程度，截距，斜率等信息<br><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/c9d3e8cc560037c6b149743080da290.png" alt=""><br>（Python运行结果的很多信息都需要自己用print打印出来，并不代表他没有求）。<br>matplotlib已经帮我们找到一条一次函数拟合曲线，这条曲线与原始数据有着很强的相关性，想拟合更高阶的曲线，例如二次函数，把degree参数改成2即可。</p><p>tips:<br>想绘制折线图可以加上以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.plot(x, y,<span class="string">&#x27;b-&#x27;</span>, color=<span class="string">&quot;blue&quot;</span>) <span class="comment"># &#x27;b-&#x27;表示为蓝色的折线，其他用法请参考matplotlib官网，请注意折线连接方式，为了确保折线方向一致，请将x轴数据从小到大排列</span></span><br></pre></td></tr></table></figure><p>12.5更新:坐标值需要无穷时，可用<code>float('inf')</code>代替（实际上如果不知道的话，可以像我一样用coploit让他自己生成出来）））<br>至此先停笔，有新的需求时会再补充。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
          <category> Scipy </category>
          
          <category> Matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scipy </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>abc</title>
      <link href="/2024/11/27/abc/"/>
      <url>/2024/11/27/abc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/wallhavenm3rm5k.jpg" alt=""><br><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/btr.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo和github搭建个人博客教程</title>
      <link href="/2024/11/26/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2024/11/26/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作">准备工作</h3><p><strong>tips: 建议掌握科学上网，否则git安装包可能就要下一天））</strong></p><ol><li><p>安装<a href="https://git-scm.com/downloads">git</a>，我选用的是windows，64位版本，git version 2.47.0.windows.2</p></li><li><p>安装<a href="https://nodejs.org/zh-cn/download/">node.js</a>，我选用的是22.11.0版本（请不要使用23.3.0版本，亲测存在bug，详情自行查找github上相关内容）(Node.js安装包包含npm，无需单独安装)<br>安装完成之后在桌面右键打开git bash，输入以下命令：（出现版本号则说明安装成功）</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br><span class="line">git -v</span><br></pre></td></tr></table></figure><ol start="3"><li>安装hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><ol start="4"><li>通过git bash命令行选择一个合适的目录创建一个新的hexo博客文件夹，例如hexo blog，并进入该目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> hexo blog</span><br><span class="line"><span class="built_in">cd</span> hexo blog</span><br></pre></td></tr></table></figure><ol start="5"><li>初始化hexo博客并安装组件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ol start="6"><li><p>登录/注册github账号</p></li><li><p>在桌面右键打开git bash，输入以下命令，设置用户名和邮箱</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github 用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;github 邮箱&quot;</span></span><br></pre></td></tr></table></figure><ol start="8"><li>创建SSH Key并添加到github</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;github 邮箱&quot;</span><br></pre></td></tr></table></figure><ol start="9"><li><p>打开C:\Users\你的用户名.ssh\，找到id_rsa.pub文件用记事本打开，复制里面的内容，登录github，点击左上角头像，选择 <code>setting</code>，选择<code>SSH and GPG keys</code>，点击<code>New SSH Key</code>，把复制的公钥粘贴到Key中，title随便起，点击<code>Add SSH Key</code>。</p></li><li><p>打开git bash,输入以下命令检查是否连接成功：<br>（出现<code>Hi yourusername! You've successfully authenticated, but GitHub does not provide shell access.</code>则说明连接成功）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><ol start="11"><li><p>创建github pages仓库，选<code>New repository</code>,在<code>repository name</code>中输入<code>yourname.github.io</code>,选择<code>Public</code>，点击<code>Add a README file</code>，点击<code>Create repository</code>。</p></li><li><p>输入以下命令查看博客：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate # 以后可简写为hexo g，生成静态文件</span><br><span class="line">hexo server # 以后可简写为hexo s，启动本地服务器</span><br></pre></td></tr></table></figure><ol start="13"><li><p>打开浏览器，输入<code>http://localhost:4000</code>，看到hexo默认的主题，说明博客搭建成功。ctrl+c关闭本地服务器。</p></li><li><p>打开博客文件夹，找到<code>_config.yml</code>文件，修改以下内容：</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的博客标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">你的博客副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你的博客描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://localhost:4000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment"># 此处部分教程为master，但2021之后github默认分支为main，请注意</span></span><br></pre></td></tr></table></figure><ol start="15"><li>保存并关闭文件，输入以下命令：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># 安装hexo-deployer-git插件,否则无法执行hexo d命令</span></span><br><span class="line">hexo clean <span class="comment"># 清除缓存</span></span><br><span class="line">hexo g <span class="comment"># 生成静态文件</span></span><br><span class="line">hexo d <span class="comment"># 部署博客到github pages</span></span><br><span class="line">hexo s <span class="comment"># 启动本地服务器</span></span><br></pre></td></tr></table></figure><ol start="16"><li>打开浏览器，输入<code>http://yourname.github.io</code>，看到你的博客，说明部署成功。tips:以后部署博客步骤一键四连即可，如果只是想预览博客直接<code>hexo s</code>也可以，别忘了上传。</li></ol><h3 id="安装配置butterfly主题">安装配置butterfly主题</h3><p>不详细展开 <strong>实际上这一步可能是最长的</strong>（（（</p><p>请参照官方文档<a href="https://jerryc.me/posts/21cfbf15/">Butterfly主题文档</a>进行安装配置！功能很多，自行参考或寻找其他教程，butterfly主题还有很多魔改功能，可以自行探索。</p><p>最后重新部署网站就能看到butterfly主题的效果了。在实现相关功能之前请确保安装了所需的组件。</p><h3 id="安装配置Picgo图床插件-可选">安装配置Picgo图床插件(可选)</h3><p>不做赘述，强烈建议搜索相关教程，简单易上手，推荐使用Gitee图床，免费且与github长相差不多，准确来说就是国内版。(这一步推荐配合本地相对路径一起食用，全部用图床的图片有可能会像我一样遇到Gitee/CDN给图片重定向的问题，导致无法正常显示)</p><h3 id="创建博客">创建博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;博客标题&quot;</span> <span class="comment"># hexo n</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s <span class="comment"># 一键四连,更推荐自己写一个bat脚本来实现,效率高嘛</span></span><br></pre></td></tr></table></figure><h3 id="还有话要说">还有话要说</h3><p>本教程只是简单的介绍了一下创建教程，本人搭建期间也遇到了很多问题，但最终都自行查找解决，希望能帮助到大家。</p><p>找不到解决方案或者希望能有更深入的理解可以和<a href="https://chatgpt.com/">ChatGPT</a>讨论，可以锻炼自己提问的能力和debug的能力（bushi）</p><p>建议至少掌握一点markdown的语法，对开发者工具有一些了解，能读懂一点HTML，CSS代码，这些技能树（技能苗？）可以有效的帮助你解决出现的bug，甚至可以自己尝试魔改主题文件)</p><p>最后祝你使用愉快！</p><blockquote><p><font color=#FFC125 size=4>特别鸣谢：</font><br>  感谢<a href="https://theuho.site">theuho</a>大佬（），帮助我解决了几个关键的bug</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Picgo </tag>
            
            <tag> blog </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World！第一篇博客</title>
      <link href="/2024/11/26/hello-world/"/>
      <url>/2024/11/26/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="2024-11-26本网站的第一篇博客，欢迎大家来到这里！特此纪念！">2024/11/26本网站的第一篇博客，欢迎大家来到这里！特此纪念！</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
