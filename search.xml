<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World！第一篇博客</title>
      <link href="/2024/11/30/hello-world/"/>
      <url>/2024/11/30/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="2024-11-26本网站的第一篇博客，欢迎大家来到这里！特此纪念！"><a href="#2024-11-26本网站的第一篇博客，欢迎大家来到这里！特此纪念！" class="headerlink" title="2024&#x2F;11&#x2F;26本网站的第一篇博客，欢迎大家来到这里！特此纪念！"></a>2024&#x2F;11&#x2F;26本网站的第一篇博客，欢迎大家来到这里！特此纪念！</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>abc</title>
      <link href="/2024/11/29/abc/"/>
      <url>/2024/11/29/abc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/wallhavenm3rm5k.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>scipy matplotlib学习笔记</title>
      <link href="/2024/11/28/scipy-matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/11/28/scipy-matplotlib%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言：探索matplotlib的世界"><a href="#前言：探索matplotlib的世界" class="headerlink" title="前言：探索matplotlib的世界"></a>前言：探索matplotlib的世界</h2><p>lz作为一个几乎没有py基础的萌新，对py各种强大的开源库早有耳闻，借着这次机会，希望能通过学习matplotlib来打开python的世界的大门。（不是第一次打开了）））</p><p>matplotlib是python中一个著名的绘图库，它提供了一系列的绘图函数，可以用来绘制各种图形，包括散点图，折线图，柱状图，饼图，等等。</p><p>下载matplotlib的方法也很简单，Windows系统已经安装好了Python代码运行所需的环境，直接在命令行输入这一行代码即可，安装成功后，我们就可以开始绘图了。</p><pre><code class="highlight python">pip install matplotlib</code></pre><p>本文主要介绍了matplotlib的一些基本用法，包括绘制简单的散点图，分析趋势，拟合曲线等功能。（更强悍的功能有待挖掘，并不是库不够强大，只是lz水平有限+已经足够课程要求，只能说是入门级的学习笔记）</p><p>附上matplotlib官网：<a href="https://matplotlib.org/">https://matplotlib.org</a>，里面有丰富的教程和示例，强烈建议读者多多参考（能不能看懂又是另一回事）））。</p><h2 id="绘制散点图"><a href="#绘制散点图" class="headerlink" title="绘制散点图"></a>绘制散点图</h2><p>matplotlib中最简单的绘图方式就是绘制散点图，这里以code coploit给我生成的两组数据为例） 代码如下：</p><pre><code class="highlight python"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="comment"># 绘制数据</span>x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])y1 = np.array([<span class="number">1.5</span>, <span class="number">2.5</span>, <span class="number">3.5</span>, <span class="number">4.5</span>, <span class="number">5.5</span>, <span class="number">6.5</span>, <span class="number">7.5</span>, <span class="number">8.5</span>, <span class="number">9.5</span>, <span class="number">10.5</span>])y2 = np.array([<span class="number">1.2</span>, <span class="number">2.2</span>, <span class="number">3.2</span>, <span class="number">4.2</span>, <span class="number">5.2</span>, <span class="number">6.2</span>, <span class="number">7.2</span>, <span class="number">8.2</span>, <span class="number">9.2</span>, <span class="number">10.2</span>])<span class="comment"># 绘制散点图</span>plt.scatter(x, y1, label=<span class="string">&#x27;Group 1&#x27;</span>)     <span class="comment"># Group 1为图像的名称，Group 2同理</span>plt.scatter(x, y2, label=<span class="string">&#x27;Group 2&#x27;</span>)<span class="comment"># 设置图例</span>plt.legend()<span class="comment"># 设置标题和轴标签</span>plt.title(<span class="string">&#x27;Example of Scatter Plot&#x27;</span>)        <span class="comment"># 标题</span>plt.xlabel(<span class="string">&#x27;X-axis&#x27;</span>)                      <span class="comment"># x轴标签</span>plt.ylabel(<span class="string">&#x27;Y-axis&#x27;</span>)                      <span class="comment"># y轴标签</span><span class="comment"># 显示图形</span>plt.show()</code></pre><p>可以复制代码查看运行结果，运行结果如下：<br><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/20241128201328.png"></p><p>可以看到，matplotlib绘制的散点图非常直观，请读者对照着代码尝试理解。</p><p>下面提供几种常见的函数：</p><pre><code class="highlight python"><span class="comment"># 设置图例的位置，&#x27;upper left&#x27;表示左上角</span>plt.legend([<span class="string">&#x27;Group 1&#x27;</span>, <span class="string">&#x27;Group 2&#x27;</span>], loc=<span class="string">&#x27;upper left&#x27;</span>)<span class="comment"># 设置坐标轴范围</span>plt.xlim(<span class="number">0</span>, <span class="number">10</span>)plt.ylim(<span class="number">0</span>, <span class="number">11</span>)<span class="comment"># 设置x轴刻度</span>plt.xticks([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])   <span class="comment"># 或者如下，2为步进值</span>plt.xticks(np.arange(<span class="number">1</span>, <span class="number">11</span>, <span class="number">2</span>))<span class="comment"># 设置点的颜色</span>plt.scatter(x, y1, c=<span class="string">&#x27;r&#x27;</span>, label=<span class="string">&#x27;Group 1&#x27;</span>)<span class="comment"># &#x27;r&#x27;表示红色，其他颜色代码请参考matplotlib官网,&#x27;Group 1&#x27;为图像的名称</span></code></pre><p>至此掌握这几种函数我们已经能绘制一些简单的散点图了，气泡图，三维图，热力图等功能请自行查找相关资料。</p><h2 id="使用散点图拟合曲线"><a href="#使用散点图拟合曲线" class="headerlink" title="使用散点图拟合曲线"></a>使用散点图拟合曲线</h2><p>matplotlib中有很多函数可以用来拟合曲线，这里以拟合一条直线函数为例，代码如下：</p><pre><code class="highlight python"><span class="keyword">import</span> numpy <span class="keyword">as</span> np<span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt<span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr    <span class="comment"># 计算相关系数 引入pearsonr函数</span>x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1.5</span>, <span class="number">4</span>, <span class="number">2.5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5.5</span>, <span class="number">5</span>, <span class="number">2</span>]y = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">4.5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">13</span>, <span class="number">3</span>]plt.scatter(x, y, color=<span class="string">&quot;red&quot;</span>)plt.title(<span class="string">&quot;Scatter Plot of the data&quot;</span>)plt.xlabel(<span class="string">&quot;X&quot;</span>)plt.ylabel(<span class="string">&quot;Y&quot;</span>)linear_model = np.polyfit(x, y, <span class="number">1</span>)     <span class="comment"># 拟合一条直线</span>linear_model_fn = np.poly1d(linear_model)    <span class="comment"># 得到拟合函数</span>x_s = np.arange(<span class="number">0</span>, <span class="number">7</span>)     <span class="comment"># 定义x轴范围</span>plt.plot(x_s, linear_model_fn(x_s), color=<span class="string">&quot;green&quot;</span>)     <span class="comment"># 绘制拟合曲线</span><span class="comment"># 计算相关系数</span>corr, _ = pearsonr(x, y)<span class="built_in">print</span>(<span class="string">&quot;相关系数：&quot;</span>, corr)<span class="comment"># 相关系数r</span><span class="comment"># 计算拟合曲线与原始数据的误差</span>y_pred = linear_model_fn(x)mse = np.mean((y_pred - y) ** <span class="number">2</span>)<span class="built_in">print</span>(<span class="string">&quot;MSE：&quot;</span>, mse)   <span class="comment"># 均方误差</span><span class="comment"># 计算拟合曲线的拟合程度</span>r_squared = <span class="number">1</span> - (mse / np.var(y))<span class="built_in">print</span>(<span class="string">&quot;拟合程度：&quot;</span>, r_squared)<span class="comment"># 拟合程度r^2</span><span class="comment"># 得到拟合曲线的截距和斜率</span><span class="built_in">print</span>(<span class="string">&quot;截距：&quot;</span>, linear_model[<span class="number">1</span>])<span class="built_in">print</span>(<span class="string">&quot;斜率：&quot;</span>, linear_model[<span class="number">0</span>])plt.show()</code></pre><p>运行代码结果如下：</p><p><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/Figure.png"><br>保存之后运行代码，可以看到相关系数，MSE，拟合程度，截距，斜率等信息<br><img src="https://gitee.com/wwwwwwangzx/figurebed/raw/master/img/c9d3e8cc560037c6b149743080da290.png"><br>（Python运行结果的很多信息都需要自己用print打印出来，并不代表他没有求）。<br>matplotlib已经帮我们找到一条一次函数拟合曲线，这条曲线与原始数据有着很强的相关性，想拟合更高阶的曲线，例如二次函数，把degree参数改成2即可。</p><p>tips:<br>想绘制折线图可以加上以下代码：</p><pre><code class="highlight python">plt.plot(x, y,<span class="string">&#x27;b-&#x27;</span>, color=<span class="string">&quot;blue&quot;</span>) <span class="comment"># &#x27;b-&#x27;表示为蓝色的折线，其他用法请参考matplotlib官网，请注意折线连接方式，为了确保折线方向一致，请将x轴数据从小到大排列</span></code></pre><p>至此先停笔，有新的需求时会再补充。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Python </category>
          
          <category> Scipy </category>
          
          <category> Matplotlib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scipy </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于hexo和github搭建个人博客教程</title>
      <link href="/2024/11/26/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
      <url>/2024/11/26/%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>tips: 建议掌握科学上网，否则git安装包可能就要下一天））</strong></p><ol><li><p>安装<a href="https://git-scm.com/downloads">git</a>，我选用的是windows，64位版本，git version 2.47.0.windows.2</p></li><li><p>安装<a href="https://nodejs.org/zh-cn/download/">node.js</a>，我选用的是22.11.0版本（请不要使用23.3.0版本，亲测存在bug，详情自行查找github上相关内容）(Node.js安装包包含npm，无需单独安装)<br>安装完成之后在桌面右键打开git bash，输入以下命令：（出现版本号则说明安装成功）</p><pre><code class="highlight plaintext">npm -vnode -vgit -v</code></pre></li><li><p>安装hexo</p><pre><code class="highlight plaintext">npm install hexo-cli -g</code></pre></li><li><p>通过git bash命令行选择一个合适的目录创建一个新的hexo博客文件夹，例如hexo blog，并进入该目录</p><pre><code class="highlight plaintext">mkdir hexo blogcd hexo blog</code></pre></li><li><p>初始化hexo博客并安装组件</p><pre><code class="highlight plaintext">hexo initnpm install</code></pre></li><li><p>登录&#x2F;注册github账号</p></li><li><p>在桌面右键打开git bash，输入以下命令，设置用户名和邮箱</p><pre><code class="highlight plaintext">git config --global user.name &quot;github 用户名&quot;git config --global user.email &quot;github 邮箱&quot;</code></pre></li><li><p>创建SSH Key并添加到github</p><pre><code class="highlight plaintext">ssh-keygen -t rsa -C &quot;github 邮箱&quot;</code></pre></li><li><p>打开C:\Users\你的用户名.ssh\，找到id_rsa.pub文件用记事本打开，复制里面的内容，登录github，点击左上角头像，选择 <code>setting</code>，选择<code>SSH and GPG keys</code>，点击<code>New SSH Key</code>，把复制的公钥粘贴到Key中，title随便起，点击<code>Add SSH Key</code>。</p></li><li><p>打开git bash,输入以下命令检查是否连接成功：<br>（出现<code>Hi yourusername! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code>则说明连接成功）</p><pre><code class="highlight plaintext">ssh -T git@github.com</code></pre></li><li><p>创建github pages仓库<br>(施工中。。。)</p></li></ol><ul><li>安装Picgo图床插件（可选）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
            <tag> Picgo </tag>
            
            <tag> blog </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
